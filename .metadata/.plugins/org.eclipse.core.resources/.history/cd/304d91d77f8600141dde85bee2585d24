package common.l33tGaem.init;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import common.l33tGaem.graphics.GaemPanel;
import common.l33tGaem.reference.Reference;

@SuppressWarnings("serial")
public class Gaem extends Canvas implements Runnable{
	
	
	private Thread thread;
	public boolean running = false;
	
	public Gaem() {
		new GaemPanel(Reference.HEIGHT, Reference.WIDTH, Reference.SCALE, this);
		
	}
	
	public synchronized void start() {
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop() {
		try{ 
			thread.join();
			running = false;
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void run() { //borrowed a ticking system for the game because 1: I have ADD and I couldn't be expected to type it all out and 2: I wa
		long lastTime = System.nanoTime();
		double amountOfTicks = 60;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
		long now = System.nanoTime();
		delta += (now - lastTime) / ns;
		lastTime = now;
		while(delta >= 1){
		tick();
		delta--;
		}
		if(running)
			render();
			frames++;

			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}
	
	public void tick() {
		
	}
	
	public void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.cyan);
		g.fillRect(0, 0, Reference.WIDTH * 1, Reference.HEIGHT * 1);
		
		g.dispose();
		bs.show();
	}
	
	public static void main(String[] args) {
		new Gaem();
		
	}	
}
